class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length, n = grid[0].length, fresh = 0, level = 0;
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j] == 1)
                    fresh++;
                else if(grid[i][j] == 2)
                    queue.offer(new int[]{i, j});
            }
        }
        int[][] directions = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        while(!queue.isEmpty() && fresh > 0) {
            int size = queue.size();
            while(size-- > 0) {
                int[] cell = queue.poll();
                int x = cell[0], y = cell[1];
                for(int[] direction : directions) {
                    int newX = x + direction[0], newY = y + direction[1];
                    if(newX < 0 || newX == m || newY < 0 || newY == n || grid[newX][newY] != 1)
                        continue;
                    queue.offer(new int[]{newX, newY});
                    grid[newX][newY] = 2;
                    fresh--;
                }
            }
            level++;
        }
        return fresh > 0 ? -1 : level;
    }
}
