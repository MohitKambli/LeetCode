class Solution {
    public void helper(int i, int j, int m, int n, int[][] matrix) {
        if(i < 0 || i == m || j < 0 || j == n || matrix[i][j] == 1)
            return;
        
        matrix[i][j] = 1;
        helper(i-1, j, m, n, matrix);
        helper(i+1, j, m, n, matrix);
        helper(i, j-1, m, n, matrix);
        helper(i, j+1, m, n, matrix);
    }
    public int regionsBySlashes(String[] grid) {
        int m = grid.length, n = grid[0].length();
        int ans = 0;
        int[][] matrix = new int[m * 3][n * 3];
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i].charAt(j) == '/') {
                    matrix[i * 3][j * 3 + 2] = 1;
                    matrix[i * 3 + 1][j * 3 + 1] = 1;
                    matrix[i * 3 + 2][j * 3] = 1;
                } else if(grid[i].charAt(j) == '\\') {
                    matrix[i * 3][j * 3] = 1;
                    matrix[i * 3 + 1][j * 3 + 1] = 1;
                    matrix[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int newM = matrix.length, newN = matrix[0].length;
        for(int i=0;i<newM;i++) {
            for(int j=0;j<newN;j++) {
                if(matrix[i][j] == 0) {
                    helper(i, j, newM, newN, matrix);
                    ans++;
                }
            }
        }
        return ans;
    }
}
