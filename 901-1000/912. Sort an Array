class Solution {
    public void merge(int left, int mid, int right, int[] nums) {
        int i = left, j = mid+1, k = 0;
        int[] arr = new int[nums.length];
        while(i <= mid && j <= right) {
            if(nums[i] <= nums[j])
                arr[k++] = nums[i++];
            else
                arr[k++] = nums[j++];
        }
        while(i <= mid)
            arr[k++] = nums[i++];
        while(j <= right)
            arr[k++] = nums[j++];
        k = 0;
        for(int p=left;p<=right;p++)
            nums[p] = arr[k++];
    }
    public void mergeSort(int left, int right, int[] nums) {
        if(left >= right)
            return;
        
        int mid = left + (right - left) / 2;
        mergeSort(left, mid, nums);
        mergeSort(mid+1, right, nums);
        merge(left, mid, right, nums);
    }
    public int[] sortArray(int[] nums) {
        // int n = nums.length;
        // mergeSort(0, n-1, nums);
        Arrays.sort(nums);
        return nums;
    }
}
