class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        for(int[] arr : dist)
            Arrays.fill(arr, Integer.MAX_VALUE);
        dist[0][0] = 0;
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        heap.add(new int[]{0, 0, 0});
        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        while(!heap.isEmpty()) {
            int[] pair = heap.poll();
            int x = pair[0], y = pair[1], cost = pair[2];
            if(x == m-1 && y == n-1)
                return cost;
            for(int i=0;i<4;i++) {
                int newX = x + directions[i][0], newY = y + directions[i][1];
                if(newX < 0 || newX == m || newY < 0 || newY == n)
                    continue;
                
                int newCost = cost + (i + 1 == grid[x][y] ? 0 : 1);
                if(dist[newX][newY] > newCost) {
                    dist[newX][newY] = newCost;
                    heap.add(new int[]{newX, newY, newCost});
                }
            }
        }
        return -1;
    }
}
