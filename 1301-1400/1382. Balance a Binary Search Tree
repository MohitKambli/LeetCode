/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void inorder(TreeNode node, List<Integer> arr) {
        if(node == null)
            return;
        inorder(node.left, arr);
        arr.add(node.val);
        inorder(node.right, arr);
    }
    public TreeNode helper(List<Integer> arr, int left, int right) {
        if(left > right)
            return null;
        
        int mid = (left + right) / 2;
        TreeNode node = new TreeNode(arr.get(mid));
        node.left = helper(arr, left, mid - 1);
        node.right = helper(arr, mid + 1, right);
        return node;
    }
    public TreeNode balanceBST(TreeNode root) {
        List<Integer> arr = new ArrayList<>();
        inorder(root, arr);
        return helper(arr, 0, arr.size()-1);
    }
}
