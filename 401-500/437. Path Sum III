/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public void dfs(TreeNode node, int targetSum, long currentSum) {
        if(node == null)
            return;
        currentSum += node.val;
        dfs(node.left, targetSum, currentSum);
        dfs(node.right, targetSum, currentSum);
        if(currentSum == targetSum)
            count++;
    }
    public void helper(TreeNode node, int targetSum) {
        if(node == null)
            return;
        dfs(node, targetSum, 0);
        helper(node.left, targetSum);
        helper(node.right, targetSum);
    }
    public int pathSum(TreeNode root, int targetSum) {
        helper(root, targetSum);
        return count;
    }
}










# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        def dfs(node, target_sum, current, ans):
            if not node:
                return
            
            current += node.val
            dfs(node.left, target_sum, current, ans)
            dfs(node.right, target_sum, current, ans)
            if current == target_sum:
                ans[0] += 1

        def helper(node, target_sum, ans):
            if not node:
                return
            
            dfs(node, target_sum, 0, ans)
            helper(node.left, target_sum, ans)
            helper(node.right, target_sum, ans)
        
        ans = [0]
        helper(root, targetSum, ans)
        return ans[0]
