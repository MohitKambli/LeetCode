/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Node> queue = new ArrayList<>();
        queue.add(root);
        while(!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for(int i=0;i<size;i++) {
                Node node = queue.remove(0);
                if(node != null) {
                    level.add(node.val);
                    for(Node child : node.children)
                        queue.add(child);
                }
            }
            if(!level.isEmpty())
                ans.add(level);
        }
        return ans;
    }
}








"""
# Definition for a Node.
class Node:
    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):
        self.val = val
        self.children = children
"""

class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        ans = []
        queue = [root]
        while queue:
            size = len(queue)
            temp = []
            while size > 0:
                node = queue.pop(0)
                if node:
                    temp.append(node.val)
                    for child in node.children:
                        queue.append(child)
                size -= 1
            if temp:
                ans.append(temp)
        return ans
