class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for(char ch : s.toCharArray())
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        PriorityQueue<Character> heap = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));
        for(char ch : map.keySet())
            heap.add(ch);
        String ans = "";
        while(!heap.isEmpty()) {
            char ch = heap.poll();
            int value = map.get(ch);
            for(int i=0;i<value;i++)
                ans += ch;
        }
        return ans;
    }
}



class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        from collections import OrderedDict
        count = OrderedDict()
        for ch in s:
            if ch not in count:
                count[ch] = 0
            count[ch] += 1
        sorted_count = OrderedDict(sorted(count.items(), key = lambda x : x[1], reverse = True))
        ans = ''
        for key, value in sorted_count.items():
            for i in range(value):
                ans += key
        return ans




from collections import OrderedDict
class Solution:
    def frequencySort(self, s: str) -> str:
        frequency = OrderedDict()
        ans = ''
        for ch in s:
            frequency[ch] = frequency.get(ch, 0) + 1
        sorted_characters = OrderedDict(sorted(frequency.items(), key=lambda item: (-item[1])))
        for key, value in sorted_characters.items():
            for i in range(value):
                ans += key
        return ans
