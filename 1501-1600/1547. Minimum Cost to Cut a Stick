class Solution {
    public int helper(int i, int j, int[] arr, int[][] dp) {
        if(i > j)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int res = Integer.MAX_VALUE;
        for(int index=i;index<=j;index++) {
            int cost = (arr[j+1] - arr[i-1]) + helper(i, index-1, arr, dp) + helper(index+1, j, arr, dp);
            res = Math.min(res, cost);
        }
        return dp[i][j] = res;
    }
    public int minCost(int n, int[] cuts) {
        int[] arr = new int[cuts.length+2];
        arr[0] = 0;
        int j = 1;
        for(int x : cuts)
            arr[j++] = x;
        arr[arr.length-1] = n;
        Arrays.sort(arr);
        int[][] dp = new int[arr.length][arr.length];
        for(int[] row : dp)
            Arrays.fill(row, -1);
        return helper(1, cuts.length, arr, dp);
    }
}
