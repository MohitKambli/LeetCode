class Solution {
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length, n = heights[0].length;
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        heap.add(new int[]{0, 0, 0});
        int[][] ans = new int[m][n];
        for(int[] arr : ans)
            Arrays.fill(arr, Integer.MAX_VALUE);
        ans[0][0] = 0;
        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        while(!heap.isEmpty()) {
            int[] pair = heap.poll();
            int diff = pair[0];
            int x = pair[1], y = pair[2];
            if(x == m-1 && y == n-1)
                return ans[m-1][n-1];
            for(int[] direction : directions) {
                int dx = direction[0], dy = direction[1];
                int newX = x + dx, newY = y + dy;
                if(newX < 0 || newX == m || newY < 0 || newY == n)
                    continue;
                int maxDiff = Math.max(diff, Math.abs(heights[newX][newY] - heights[x][y]));
                if(maxDiff < ans[newX][newY]) {
                    ans[newX][newY] = maxDiff;
                    heap.add(new int[]{maxDiff, newX, newY});
                }
            }
        }
        return ans[m-1][n-1];
    }
}
