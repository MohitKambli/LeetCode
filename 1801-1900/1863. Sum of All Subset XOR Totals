class Solution {
    List<List<Integer>> subsets = new ArrayList<>();
    public void helper(int index, int[] nums, List<Integer> temp) {
        if(index >= nums.length) {
            subsets.add(new ArrayList<>(temp));
            return;
        }
        temp.add(nums[index]);
        helper(index+1, nums, temp);
        temp.remove(temp.size()-1);
        helper(index+1, nums, temp);
    }
    public int subsetXORSum(int[] nums) {
        List<Integer> temp = new ArrayList<>();
        helper(0, nums, temp);
        int sum = 0;
        for(List<Integer> subset : subsets) {
            int value = 0;
            for(int i=0;i<subset.size();i++)
                value ^= subset.get(i);
            sum += value;
        }
        return sum;
    }
}


class Solution {
    public void helper(int index, int n, int[] nums, List<Integer> arr, List<List<Integer>> ans) {
        ans.add(new ArrayList<>(arr));
        for(int i=index;i<n;i++) {
            arr.add(nums[i]);
            helper(i+1, n, nums, arr, ans);
            arr.remove(arr.size()-1);
        }
    }
    public int subsetXORSum(int[] nums) {
        int n = nums.length;
        List<Integer> arr = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        helper(0, n, nums, arr, ans);
        int xor = 0;
        for(List<Integer> pair : ans) {
            int temp = 0;
            for(int p : pair)
                temp ^= p;
            xor += temp;
        }
        return xor;
    }
}
