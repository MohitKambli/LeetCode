class Solution {
    public boolean helper(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        return m <= n && word1.equals(word2.substring(0, m)) && word1.equals(word2.substring(n-m, n));
    }
    public int countPrefixSuffixPairs(String[] words) {
        int n = words.length;
        int count = 0;
        for(int i=0;i<n-1;i++) {
            for(int j=i+1;j<n;j++) {
                if(helper(words[i], words[j]))
                    count++;
            }
        }
        return count;
    }
}


class Solution {
    public int countPrefixSuffixPairs(String[] words) {
        int ans = 0, n = words.length;
        Set<String> set = new HashSet<>();
        for(int i=0;i<n;i++) {
            String currentWord = words[i];
            int a = currentWord.length();
            for(int j=i+1;j<n;j++) {
                String nextWord = words[j];
                int b = nextWord.length();
                if(a <= b) {
                    if(nextWord.substring(0, a).equals(currentWord) && nextWord.substring(b-a, b).equals(currentWord))
                        ans++;
                }
            }
        }
        return ans;
    }
}
