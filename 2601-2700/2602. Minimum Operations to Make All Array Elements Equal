class Solution {
    public int binarySearch(int[] nums, int left, int right, int element) {
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] == element) {
                return mid;
            } else if(nums[mid] < element) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    public List<Long> minOperations(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int n = nums.length, m = queries.length;
        List<Long> ans = new ArrayList<>();
        long[] prefix = new long[n];
        prefix[0] = nums[0];
        for(int i=1;i<n;i++)
            prefix[i] = prefix[i-1] + nums[i];
        long[] suffix = new long[n];
        suffix[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--)
            suffix[i] = suffix[i+1] + nums[i];
        for(int i=0;i<m;i++) {
            int element = queries[i];
            int index = binarySearch(nums, 0, n-1, element);
            long leftPart = 0;
            if(index > 0)
                leftPart = (long)element * index - prefix[index-1];
            long rightPart = 0;
            if(index < n)
                rightPart = suffix[index] - (long)element * (n - index);
            ans.add(leftPart + rightPart);
        }
        return ans;
    }
}
