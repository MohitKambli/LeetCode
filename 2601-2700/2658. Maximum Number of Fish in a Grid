class Solution {
    public int helper(int i, int j, int m, int n, int[][] grid) {
        if(i < 0 || i == m || j < 0 || j == n || grid[i][j] == 0)
            return 0;

        int res = grid[i][j];
        grid[i][j] = 0;
        res += helper(i-1, j, m, n, grid);
        res += helper(i+1, j, m, n, grid);
        res += helper(i, j-1, m, n, grid);
        res += helper(i, j+1, m, n, grid);
        return res;
    }
    public int findMaxFish(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j] > 0)
                    count = Math.max(count, helper(i, j, m, n, grid));
        return count < 0 ? 0 : count;
    }
}
