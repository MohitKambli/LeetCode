class Solution {
    public int helper(int i, int j, int m, int n, int[][] grid, int prev, int[][] dp) {
        if(i < 0 || j < 0 || i == m || j == n || grid[i][j] <= prev)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int upRight = helper(i-1, j+1, m, n, grid, grid[i][j], dp);
        int right = helper(i, j+1, m, n, grid, grid[i][j], dp);
        int downRight = helper(i+1, j+1, m, n, grid, grid[i][j], dp);
        return dp[i][j] = 1 + Math.max(upRight, Math.max(right, downRight));
    }
    public int maxMoves(int[][] grid) {
        int m = grid.length, n = grid[0].length, ans = 0;
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        for(int i=0;i<m;i++)
            ans = Math.max(ans, helper(i, 0, m, n, grid, -1, dp));
        return ans-1;
    }
}
