class Graph {
    Map<Integer, List<Pair<Integer, Integer>>> adj;
    int N;
    public Graph(int n, int[][] edges) {
        N = n;
        adj = new HashMap<>();
        for(int[] edge : edges)
            addEdge(edge);
    }
    
    public void addEdge(int[] edge) {
        int u = edge[0];
        int v = edge[1];
        int cost = edge[2];
        if(!adj.containsKey(u)) {
            List<Pair<Integer, Integer>> arr = new ArrayList<>();
            Pair<Integer, Integer> pair = new Pair<>(v, cost);
            arr.add(pair);
            adj.put(u, arr);
        } else {
            adj.get(u).add(new Pair<>(v, cost));
        }
    }
    
    public int shortestPath(int node1, int node2) {
        int[] ans = new int[N];
        Arrays.fill(ans, Integer.MAX_VALUE);
        ans[node1] = 0;
        PriorityQueue<Pair<Integer, Integer>> heap = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());
        heap.add(new Pair<>(node1, 0));
        while(!heap.isEmpty()) {
            Pair<Integer, Integer> pair = heap.poll();
            int node = pair.getKey();
            int distance = pair.getValue();
            if(adj.containsKey(node)) {
                for(Pair<Integer, Integer> p : adj.get(node)) {
                    int adjNode = p.getKey();
                    int adjDistance = p.getValue();
                    if(distance + adjDistance < ans[adjNode]) {
                        ans[adjNode] = distance + adjDistance;
                        heap.add(new Pair<>(adjNode, distance + adjDistance));
                    }
                }
            }
        }
        return ans[node2] == Integer.MAX_VALUE ? -1 : ans[node2];
    }
}

/**
 * Your Graph object will be instantiated and called as such:
 * Graph obj = new Graph(n, edges);
 * obj.addEdge(edge);
 * int param_2 = obj.shortestPath(node1,node2);
 */
