class Solution {
    public int minimumObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        int[][] directions = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        int[][] count = new int[m][n];
        for(int[] arr : count)
            Arrays.fill(arr, Integer.MAX_VALUE);
        count[0][0] = 0;
        heap.add(new int[]{0,0,0});
        while(!heap.isEmpty()) {
            int[] pair = heap.poll();
            int x = pair[0], y = pair[1], cost = pair[2];
            if(x == m-1 && y == n-1)
                return cost;
            for(int[] direction : directions) {
                int newX = x + direction[0], newY = y + direction[1];
                if(newX < 0 || newX == m || newY < 0 || newY == n)
                    continue;
                int tempCost = pair[2];
                if(grid[newX][newY] == 1)
                    tempCost++;
                if(tempCost >= count[newX][newY])
                    continue;
                count[newX][newY] = tempCost;
                heap.add(new int[]{newX, newY, tempCost});
            }
        }
        return -1;
    }
}
