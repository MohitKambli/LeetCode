class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        char[][] grid = new char[m][n];
        List<int[]> queue = new ArrayList<>();
        for(int[] guard : guards) {
            queue.add(guard);
            grid[guard[0]][guard[1]] = 'G';
        }
        for(int[] wall : walls)
            grid[wall[0]][wall[1]] = 'W';
        int[][] directions = new int[][]{{0, 1},{0, -1},{1, 0},{-1, 0}};
        while(!queue.isEmpty()) {
            int[] pair = queue.remove(0);
            int x = pair[0], y = pair[1];
            for(int[] direction : directions) {
                int newX = x + direction[0], newY = y + direction[1];
                while(!(newX < 0 || newX == m || newY < 0 || newY == n || grid[newX][newY] == 'G' || grid[newX][newY] == 'W')) {
                    grid[newX][newY] = 'P';
                    newX += direction[0];
                    newY += direction[1];
                }
            }
        }
        int count = 0;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j] != 'G' && grid[i][j] != 'W' && grid[i][j] != 'P')
                    count++;
        return count;
    }
}
