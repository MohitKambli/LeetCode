/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        int prefixSum = 0;
        ListNode dummy = new ListNode(-1, head);
        Map<Integer, ListNode> map = new HashMap<>();
        map.put(prefixSum, dummy);
        ListNode p = head;
        while(p != null) {
            prefixSum += p.val;
            if(map.containsKey(prefixSum)) {
                ListNode q = map.get(prefixSum);
                ListNode temp = q;
                int pSum = prefixSum;
                while(temp != p) {
                    temp = temp.next;
                    pSum += temp.val;
                    if(temp != p)
                        map.remove(pSum);
                }
                q.next = p.next;
            } else {
                map.put(prefixSum, p);
            }
            p = p.next;
        }
        return dummy.next;
    }
}
