/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        List<TreeNode> queue = new ArrayList<>();
        queue.add(root);
        int level = -1, maxSum = Integer.MIN_VALUE, i = 1;
        while(!queue.isEmpty()) {
            int size = queue.size();
            int sum = 0;
            while(size-- > 0) {
                TreeNode node = queue.remove(0);
                sum += node.val;
                if(node.left != null)
                    queue.add(node.left);
                if(node.right != null)
                    queue.add(node.right);
            }
            if(sum > maxSum) {
                maxSum = sum;
                level = i;
            }
            i++;
        }
        return level;
    }
}




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def maxLevelSum(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: int
        """
        queue = [root]
        ans, level, index = root.val, 1, 1
        while queue:
            size = len(queue)
            add = 0
            while size > 0:
                node = queue.pop(0)
                if node:
                    if node.left:
                        queue.append(node.left)
                    if node.right:
                        queue.append(node.right)
                    add += node.val
                size -= 1
            if add > ans:
                ans = add
                level = index
            index += 1
        return level


