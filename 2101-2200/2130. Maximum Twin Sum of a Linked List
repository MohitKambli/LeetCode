/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode dummy = new ListNode(-1, head);
        ListNode slow = dummy, fast = dummy;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode q = slow.next, p = null;
        slow.next = null;
        while(q != null) {
            ListNode r = q.next;
            q.next = p;
            p = q;
            q = r;
        }
        ListNode t = head;
        int ans = Integer.MIN_VALUE;
        while(t != null && p != null) {
            ans = Math.max(ans, t.val + p.val);
            t = t.next;
            p = p.next;
        }
        return ans;
    }
}





# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        temp = ListNode(next=head)
        slow, fast = temp, temp
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        p, q = None, slow.next
        slow.next = None
        while q:
            r = q.next
            q.next = p
            p = q
            q = r
        s, t, ans = head, p, 0
        while s and t:
            ans = max(ans, s.val + t.val)
            s = s.next
            t = t.next
        return ans
