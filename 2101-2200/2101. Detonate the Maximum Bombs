class Solution {
    public void helper(int node, Map<Integer, List<Integer>> map, Set<Integer> visited) {
        if(visited.contains(node))
            return;
        
        visited.add(node);
        if(map.containsKey(node))
            for(int adjNode : map.get(node))
                helper(adjNode, map, visited);
    }
    public int maximumDetonation(int[][] bombs) {
        int n = bombs.length;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0;i<n;i++) {
            long x1 = bombs[i][0];
            long y1 = bombs[i][1];
            long r1 = bombs[i][2];
            for(int j=0;j<n;j++) {
                if(i == j)
                    continue;
                long x2 = bombs[j][0];
                long y2 = bombs[j][1];
                long r2 = bombs[j][2];
                long distance = ((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1));
                if(r1 * r1 >= distance) {
                    if(!map.containsKey(i))
                        map.put(i, new ArrayList<>());
                    map.get(i).add(j);
                }
            }
        }
        int ans = 0;
        for(int i=0;i<n;i++) {
            Set<Integer> visited = new HashSet<>();
            helper(i, map, visited);
            ans = Math.max(ans, visited.size());
            visited.clear();
        }
        return ans;
    }
}
