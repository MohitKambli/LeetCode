class Solution {
    int mod = 1000000007;
    public int helper(int i, int j, int value, int[][] grid, int[][] dp) {
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || value >= grid[i][j])
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int up = helper(i-1, j, grid[i][j], grid, dp);
        int down = helper(i+1, j, grid[i][j], grid, dp);
        int left = helper(i, j-1, grid[i][j], grid, dp);
        int right = helper(i, j+1, grid[i][j], grid, dp);
        return dp[i][j] = (1 + up + down + left + right) % mod;
    }
    public int countPaths(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        int count = 0;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                count = (count + helper(i, j, -1, grid, dp)) % mod;
        return count;
    }
}
