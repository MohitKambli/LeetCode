class Solution {
    public int helper(int index, int n, String s, int k, char ch, int[][] dp) {
        if(index == n)
            return 0;
        if(dp[index][ch] != -1)
            return dp[index][ch];
        
        int notPick = helper(index+1, n, s, k, ch, dp);
        int pick = 0;
        if(ch == '#' || Math.abs(ch - s.charAt(index)) <= k)
            pick = 1 + helper(index+1, n, s, k, s.charAt(index), dp);
        return dp[index][ch] = Math.max(pick, notPick);
    }
    public int longestIdealString(String s, int k) {
        int n = s.length();
        int[][] dp = new int[n][150];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        return helper(0, n, s, k, '#', dp);
    }
}
