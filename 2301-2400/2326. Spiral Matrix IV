/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int top = 0, left = 0, right = n-1, bottom = m-1, id = 0;
        int[][] ans = new int[m][n];
        for(int[] arr : ans)
            Arrays.fill(arr, -1);
        while(top <= bottom && left <= right) {
            if(id == 0) {
                for(int i=left;i<=right && head != null;i++) {
                    ans[top][i] = head.val;
                    head = head.next;
                }
                top++;
            }
            if(id == 1) {
                for(int i=top;i<=bottom && head != null;i++) {
                    ans[i][right] = head.val;
                    head = head.next;
                }
                right--;
            }
            if(id == 2) {
                for(int i=right;i>=left && head != null;i--) {
                    ans[bottom][i] = head.val;
                    head = head.next;
                }
                bottom--;
            }
            if(id == 3) {
                for(int i=bottom;i>=top && head != null;i--) {
                    ans[i][left] = head.val;
                    head = head.next;
                }
                left++;
            }
            id = (id + 1) % 4;
        }
        return ans;
    }
}
