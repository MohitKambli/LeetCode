class Solution {
    public int reachableNodes(int n, int[][] edges, int[] restricted) {
        Set<Integer> set = new HashSet<>();
        for(int node : restricted)
            set.add(node);
        Set<Integer> visited = new HashSet<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int[] edge : edges) {
            int u = edge[0], v = edge[1];
            if(!map.containsKey(u))
                map.put(u, new ArrayList<>());
            map.get(u).add(v);
            if(!map.containsKey(v))
                map.put(v, new ArrayList<>());
            map.get(v).add(u);
        }
        List<Integer> queue = new ArrayList<>();
        queue.add(0);
        int ans = 0;
        while(!queue.isEmpty()) {
            int node = queue.remove(0);
            if(set.contains(node) || visited.contains(node))
                continue;
            visited.add(node);
            if(map.containsKey(node)) {
                for(int adjNode : map.get(node)) {
                    queue.add(adjNode);
                }
            }
            ans++;
        }
        return ans;
    }
}
