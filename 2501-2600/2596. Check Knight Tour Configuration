class Solution {
    public boolean checkValidGrid(int[][] grid) {
        int n = grid.length, step = 1;
        List<int[]> queue = new ArrayList<>();
        boolean[][] visited = new boolean[n][n];
        queue.add(new int[]{0, 0, 1});
        visited[0][0] = true;
        int[][] directions = new int[][]{{-1,-2},{-2,-1},{-2,1},{-1,2},{1,-2},{2,-1},{1,2},{2,1}};
        while(!queue.isEmpty()) {
            int[] pair = queue.remove(0);
            int x = pair[0], y = pair[1], z = pair[2];
            for(int[] direction : directions) {
                int newX = x + direction[0], newY = y + direction[1];
                if(newX < 0 || newX >= n || newY < 0 || newY >= n || visited[newX][newY] || grid[newX][newY] != z)
                    continue;
                queue.add(new int[]{newX, newY, z+1});
                visited[newX][newY] = true;
                step++;
            }
        }
        return step == (n * n);
    }
}
