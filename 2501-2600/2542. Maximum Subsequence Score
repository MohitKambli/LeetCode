class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] nums = new int[n][2];
        for(int i=0;i<n;i++) {
            nums[i][0] = nums1[i];
            nums[i][1] = nums2[i];
        }
        Arrays.sort(nums, (a, b) -> Integer.compare(b[1], a[1]));
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        long sum = 0;
        for(int i=0;i<=k-1;i++) {
            sum += nums[i][0];
            heap.offer(nums[i][0]);
        }
        long result = sum * nums[k-1][1];
        for(int i=k;i<n;i++) {
            sum += nums[i][0] - heap.poll();
            heap.offer(nums[i][0]);
            result = Math.max(result, sum * nums[i][1]);
        }
        return result;
    }
}
