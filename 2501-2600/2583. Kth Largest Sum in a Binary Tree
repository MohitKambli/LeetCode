/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        List<TreeNode> queue = new ArrayList<>();
        queue.add(root);
        PriorityQueue<Long> heap = new PriorityQueue<>((a, b) -> Long.compare(a, b));
        while(!queue.isEmpty()) {
            int size = queue.size();
            long sum = 0;
            while(size-- > 0) {
                TreeNode node = queue.remove(0);
                if(node != null) {
                    if(node.left != null)
                        queue.add(node.left);
                    if(node.right != null)
                        queue.add(node.right);
                    sum += node.val;
                }
            }
            heap.add(sum);
        }
        if(heap.size() < k)
            return -1;
        while(heap.size() > k)
            heap.poll();
        return heap.peek();
    }
}
