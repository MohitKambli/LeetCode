class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();
        for(String word : words)
            map.put(word, map.getOrDefault(word, 0) + 1);
        PriorityQueue<String> heap = new PriorityQueue<>((a, b) -> {
            return map.get(a) == map.get(b) ? a.compareTo(b) : map.get(b) - map.get(a);
        });
        for(String key : map.keySet())
            heap.offer(key);
        List<String> ans = new ArrayList<>();
        while(k-- > 0)
            ans.add(heap.poll());
        return ans;
    }
}



class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        frequency = {}
        for word in words:
            frequency[word] = frequency.get(word, 0) + 1
        sorted_words = sorted(frequency.keys(), key = lambda word : (-frequency[word], word))
        return sorted_words[:k]
