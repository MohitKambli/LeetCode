/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode helper(TreeNode node, int val) {
        if(node == null)
            return null;
        
        if(val == node.val)
            return node;
        else if(val < node.val)
            return helper(node.left, val);
        else
            return helper(node.right, val);
    }
    public TreeNode searchBST(TreeNode root, int val) {
        return helper(root, val);
    }
}





# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        def helper(node, target):
            if not node:
                return None
            
            if target == node.val:
                return node
            elif target > node.val:
                return helper(node.right, target)
            else:
                return helper(node.left, target)
        return helper(root, val)
