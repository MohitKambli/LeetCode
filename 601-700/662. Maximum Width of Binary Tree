/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        List<Pair<TreeNode, Integer>> queue = new ArrayList<>();
        queue.add(new Pair<>(root, 0));
        int count = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            int x = queue.get(0).getValue(), y = queue.get(queue.size()-1).getValue();
            count = Math.max(count, y - x + 1);
            while(size-- > 0) {
                Pair<TreeNode, Integer> pair = queue.remove(0);
                TreeNode node = pair.getKey();
                int index = pair.getValue();
                if(node.left != null)
                    queue.add(new Pair<>(node.left, (2 * index) + 1));
                if(node.right != null)
                    queue.add(new Pair<>(node.right, (2 * index) + 2));
            }
        }
        return count;
    }
}
