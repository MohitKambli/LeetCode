class Solution {
    public void helper(int index, int n, int[] nums, int target, List<Integer> temp, List<List<Integer>> ans) {
        if(target < 0)
            return;
        if(target == 0) {
            ans.add(new ArrayList<>(temp));
            return ;
        }

        for(int i=index;i<n;i++) {
            temp.add(nums[i]);
            helper(i, n, nums, target - nums[i], temp, ans);
            temp.remove(temp.size()-1);
        }
    }
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        int n = nums.length;
        helper(0, n, nums, target, temp, ans);
        return ans;
    }
}
