class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        int n = nums.length;
        for(int i=0;i<n;i++) {
            int diff = target - nums[i];
            if(map.containsKey(diff))
                return new int[]{map.get(diff), i};
            map.put(nums[i], i);
        }
        return new int[]{-1, -1};
    }
}


function twoSum(nums: number[], target: number): number[] {
    let map = new Map();
    let n = nums.length;
    for(let i=0;i<n;i++) {
        let val = target - nums[i];
        if(map.has(val))
            return [map.get(val), i];
        map.set(nums[i], i);
    }
    return [-1, -1];
};




class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        n = len(nums)
        my_dict = {}
        for i in range(n):
            diff = target - nums[i]
            if diff in my_dict:
                return [my_dict[diff], i]
            else:
                my_dict[nums[i]] = i
        return [-1,-1]




class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        my_dict = {}
        for index, value in enumerate(nums):
            diff = target - value
            if diff in my_dict:
                return [my_dict[diff], index]
            my_dict[value] = index
        return [-1, -1]
