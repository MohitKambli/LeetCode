class Solution {
    public double findMedianSortedArrays(int[] a, int[] b) {
        /*int m = nums1.length, n = nums2.length, i = 0, j = 0, k = 0;
        int[] arr = new int[m+n];
        while(i < m && j < n) {
            if(nums1[i] < nums2[j])
                arr[k++] = nums1[i++];
            else
                arr[k++] = nums2[j++];
        }
        while(i < m)
            arr[k++] = nums1[i++];
        while(j < n)
            arr[k++] = nums2[j++];
        if((m + n) % 2 == 0)
            return ((arr[(m + n) / 2]) + (arr[((m + n) / 2) - 1])) / 2.0;
        return (1.0 * arr[(m + n) / 2]);*/
        
        int n1 = a.length, n2 = b.length;
        if(n1 > n2)
            return findMedianSortedArrays(b, a);
        int elements = (n1 + n2 + 1) / 2, left = 0, right = n1, n = n1 + n2;
        while(left <= right) {
            int mid1 = left + (right - left) / 2;
            int mid2 = elements - mid1;
            int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE, r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;
            if(mid1 < n1)
                r1 = a[mid1];
            if(mid1-1 >= 0)
                l1 = a[mid1-1];
            if(mid2 < n2)
                r2 = b[mid2];
            if(mid2-1 >= 0)
                l2 = b[mid2-1];
            if(l1 <= r2 && l2 <= r1) {
                if(n % 2 == 0)
                    return ((Math.max(l1, l2)) + (Math.min(r1, r2))) / 2.0;
                else
                    return (Math.max(l1, l2));
            }
            if(l1 > r2)
                right = mid1 - 1;
            else
                left = mid1 + 1;
        }
        return -1;
    }
}
