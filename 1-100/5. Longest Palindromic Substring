class Solution {
    public boolean helper(int left, int right, String s, Boolean[][] dp) {
        if(s.charAt(left) != s.charAt(right))
            return false;
        if(left >= right)
            return true;
        if(dp[left][right] != null)
            return dp[left][right];
        
        return dp[left][right] = helper(left+1, right-1, s, dp);
    }
    public String longestPalindrome(String s) {
        int n = s.length(), len = 0;
        Boolean[][] dp = new Boolean[n][n];
        String ans = "";
        for(int i=0;i<n;i++) {
            for(int j=i;j<n;j++) {
                if(helper(i, j, s, dp) && j - i + 1 > len) {
                    ans = s.substring(i, j+1);
                    len = j - i + 1;
                }
            }
        }
        return ans;
    }
}
