class Solution {
    public int maxArea(int[] heights) {
        int left = 0, right = heights.length-1;
        int ans = 0;
        while(left < right) {
            int minHeight = Math.min(heights[left], heights[right]);
            int width = right - left;
            ans = Math.max(ans, minHeight * width);
            if(heights[left] < heights[right])
                left++;
            else
                right--;
        }
        return ans;
    }
}



class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        n = len(height)
        ans = 0
        left, right = 0, n-1
        while left < right:
            minHeight = min(height[left], height[right])
            width = right - left
            ans = max(ans, minHeight * width)
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        return ans




function maxArea(height: number[]): number {
    let left = 0, right = height.length-1, ans = 0;
    while(left < right) {
        let minHeight = Math.min(height[left], height[right]);
        let width = right - left;
        ans = Math.max(ans, width * minHeight);
        if(height[left] < height[right])
            left++;
        else
            right--;
    }
    return ans;
};





class Solution:
    def maxArea(self, height: List[int]) -> int:
        left, right = 0, len(height) - 1
        ans = 0
        while left < right:
            width = right - left
            min_height = min(height[left], height[right])
            ans = max(ans, width * min_height)
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        return ans

