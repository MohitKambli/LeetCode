class Solution {
    public boolean isValidSudoku(char[][] board) {
        Set<String> set = new HashSet<>();
        for(int i=0;i<9;i++) {
            for(int j=0;j<9;j++) {
                char ch = board[i][j];
                if(ch != '.') {
                    String row = ch + " present in row " + i;
                    String col = ch + " present in col " + j;
                    String box = ch + " present in box " + (i/3) + " - " + (j/3);
                    if(!set.add(row) || !set.add(col) || !set.add(box))
                        return false;
                }
            }
        }
        return true;
    }
}




class Solution {
    public boolean isValidSudoku(char[][] board) {
        int m = board.length, n = board[0].length;
        Set<String> visited = new HashSet<>();
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(board[i][j] != '.') {
                    String row = board[i][j] + " present in row " + i;
                    String col = board[i][j] + " present in col " + j;
                    String box = board[i][j] + " present in box " + (i/3) + "-" + (j/3);
                    if(visited.contains(row) || visited.contains(col) || visited.contains(box))
                        return false;
                    visited.add(row);
                    visited.add(col);
                    visited.add(box);
                }
            }
        }
        return true;
    }
}

