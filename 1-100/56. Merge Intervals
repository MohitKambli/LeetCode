class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        Stack<int[]> stack = new Stack<>();
        stack.push(intervals[0]);
        int n = intervals.length;
        for(int i=1;i<n;i++) {
            int currentStart = intervals[i][0];
            int currentEnd = intervals[i][1];
            int previousStart = stack.peek()[0];
            int previousEnd = stack.peek()[1];
            if(previousEnd < currentStart)
                stack.push(intervals[i]);
            else {
                int[] interval = stack.pop();
                interval[0] = Math.min(previousStart, currentStart);
                interval[1] = Math.max(previousEnd, currentEnd);
                stack.push(interval);
            }
        }
        int len = stack.size(), j = len-1;
        int[][] ans = new int[len][2];
        while(!stack.isEmpty()) {
            int[] pair = stack.pop();
            ans[j][0] = pair[0];
            ans[j][1] = pair[1];
            j--;
        }
        return ans;
    }
}
