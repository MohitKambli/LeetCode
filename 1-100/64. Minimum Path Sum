class Solution {
    public int helper(int i, int j, int[][] grid, int[][] dp) {
        if(i < 0 || j < 0)
            return 50000;
        if(i == 0 && j == 0)
            return grid[0][0];
        if(dp[i][j] != -1)
            return dp[i][j];

        int up = helper(i-1, j, grid, dp);
        int left = helper(i, j-1, grid, dp);
        return dp[i][j] = grid[i][j] + Math.min(up, left);
    }
    public int minPathSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        return helper(m-1, n-1, grid, dp);
    }
}



class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """

        m, n = len(grid), len(grid[0])
        dp = [[-1 for j in range(n)] for i in range(m)]

        def helper(i, j):
            if i < 0 or j < 0:
                return 1e9
            if i == 0 and j == 0:
                return grid[0][0]
            if dp[i][j] != -1:
                return dp[i][j]

            up = helper(i-1, j)
            left = helper(i, j-1)
            dp[i][j] = grid[i][j] + min(up, left)
            return dp[i][j]

        return helper(m-1, n-1)
