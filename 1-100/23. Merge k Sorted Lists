/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode merge(ListNode left, ListNode right, ListNode[] lists) {
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        while(left != null && right != null) {
            if(left.val < right.val) {
                current.next = left;
                left = left.next;
            } else {
                current.next = right;
                right = right.next;
            }
            current = current.next;
        }
        if(left != null)
            current.next = left;
        if(right != null)
            current.next = right;
        return dummy.next;
    }
    public ListNode helper(int left, int right, ListNode[] lists) {
        if(left == right)
            return lists[left];
        if(left > right)
            return null;

        int mid = left + (right - left) / 2;
        ListNode leftNode = helper(left, mid, lists);
        ListNode rightNode = helper(mid+1, right, lists);
        return merge(leftNode, rightNode, lists);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        int n = lists.length;
        return helper(0, n-1, lists);
    }
}
