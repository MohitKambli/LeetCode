/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode getKthNode(ListNode temp, int k) {
        k -= 1;
        while(temp != null && k != 0) {
            k--;
            temp = temp.next;
        }
        return temp;
    }
    public void reverseLL(ListNode temp) {
        ListNode p = null, q = temp;
        while(q != null) {
            ListNode r = q.next;
            q.next = p;
            p = q;
            q = r;
        }
        return;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head, prevNode = null;
        while(temp != null) {
            ListNode kthNode = getKthNode(temp, k);
            if(kthNode == null) {
                if(prevNode != null)
                    prevNode.next = temp;
                break;
            }
            ListNode nextNode = kthNode.next;
            kthNode.next = null;
            reverseLL(temp);
            if(head == temp)
                head = kthNode;
            else
                prevNode.next = kthNode;
            prevNode = temp;
            temp = nextNode;
        }
        return head;
    }
}
