class Solution {
    public void helper(int index, int n, int[] candidates, int target, List<Integer> temp, List<List<Integer>> ans) {
        if(target < 0)
            return;
        if(target == 0) {
            ans.add(new ArrayList<>(temp));
            return;
        }

        for(int i=index;i<n;i++) {
            if(i > index && candidates[i] == candidates[i-1])
                continue;
            temp.add(candidates[i]);
            helper(i+1, n, candidates, target - candidates[i], temp, ans);
            temp.remove(temp.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int n = candidates.length;
        Arrays.sort(candidates);
        List<Integer> temp = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        helper(0, n, candidates, target, temp, ans);
        return ans;
    }
}
