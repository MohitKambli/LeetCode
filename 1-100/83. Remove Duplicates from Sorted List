class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null)
            return null;
        ListNode left = head;
        ListNode right = head.next;
        while(right != null) {
            if(left.val == right.val) {
                right = right.next;
                if(right == null)
                    left.next = null;
            } else {
                left.next = right;
                left = right;
                right = right.next;
            }
        }
        return head;
    }
}



# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        current = head
        while current:
            while current.next and current.next.val == current.val:
                current.next = current.next.next
            current = current.next
        return head
