class Solution {
    public int trap(int[] height) {
        int n = height.length, ans = 0;
        int[] leftHeights = new int[n];
        leftHeights[0] = height[0];
        for(int i=1;i<n;i++)
            leftHeights[i] = Math.max(leftHeights[i-1], height[i]);
        int[] rightHeights = new int[n];
        rightHeights[n-1] = height[n-1];
        for(int i=n-2;i>=0;i--)
            rightHeights[i] = Math.max(rightHeights[i+1], height[i]);
        for(int i=0;i<n;i++)
            ans += Math.min(leftHeights[i], rightHeights[i]) - height[i];
        return ans;
    }
}




class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        n = len(height)
        left_heights, right_heights = [0 for i in range(n)], [0 for i in range(n)]
        ans = 0
        left_heights[0] = height[0]
        for i in range(1, n):
            left_heights[i] = max(left_heights[i-1], height[i])
        right_heights[n-1] = height[n-1]
        for i in range(n-2, -1, -1):
            right_heights[i] = max(right_heights[i+1], height[i])
        for i in range(n):
            ans += min(left_heights[i], right_heights[i]) - height[i]
        return ans
