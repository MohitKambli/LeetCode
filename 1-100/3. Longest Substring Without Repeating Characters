class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), j = 0, ans = 0;
        Set<Character> set = new HashSet<>();
        for(int i=0;i<n;i++) {
            char ch = s.charAt(i);
            if(!set.contains(ch)) {
                ans = Math.max(ans, i - j + 1);
            } else {
                while(set.contains(ch))
                    set.remove(s.charAt(j++));
            }
            set.add(ch);
        }
        return ans;
    }
}




class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0, i = 0, j = 0;
        Set<Character> set = new HashSet<>();
        while(i < n) {
            if(!set.contains(s.charAt(i))) {
                ans = Math.max(ans, i - j + 1);
            } else {
                while(set.contains(s.charAt(i)))
                    set.remove(s.charAt(j++));
            }
            set.add(s.charAt(i++));
        }
        return ans;
    }
}
