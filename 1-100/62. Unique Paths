class Solution {
    public int helper(int i, int j, int[][] dp) {
        if(i < 0 || j < 0)
            return 0;
        if(i == 0 && j == 0)
            return 1;
        if(dp[i][j] != -1)
            return dp[i][j];

        int up = helper(i-1, j, dp);
        int left = helper(i, j-1, dp);
        return dp[i][j] = up + left;
    }
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        return helper(m-1, n-1, dp);
    }
}





class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        dp = [[-1 for j in range(n)] for i in range(m)]
        def helper(i, j):
            if i == 0 and j == 0:
                return 1
            if i < 0 or j < 0:
                return 0
            if dp[i][j] != -1:
                return dp[i][j]

            up = helper(i-1, j)
            left = helper(i, j-1)
            dp[i][j] = up + left
            return dp[i][j]
        return helper(m-1, n-1)
