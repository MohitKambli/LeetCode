/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void helper(TreeNode node, String temp, List<String> ans) {
        if(node == null)
            return;
        if(node.left == null && node.right == null) {
            temp += node.val;
            ans.add(temp);
            return;
        }
        temp += node.val + "->";
        helper(node.left, temp, ans);
        helper(node.right, temp, ans);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        helper(root, "", ans);
        return ans;
    }
}




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def binaryTreePaths(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[str]
        """
        ans = []
        def helper(node, temp):
            if not node:
                return
            if not node.left and not node.right:
                temp += str(node.val)
                ans.append(temp)
                return

            temp += str(node.val) + '->'
            helper(node.left, temp)
            helper(node.right, temp)
        
        helper(root, '')
        return ans

