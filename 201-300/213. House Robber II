class Solution {
    public int helper(int index, int[] nums, int[] dp) {
        if(index < 0)
            return 0;
        if(index == 0)
            return nums[0];
        if(dp[index] != -1)
            return dp[index];
        
        int notTake = helper(index-1, nums, dp);
        int take = nums[index] + helper(index-2, nums, dp);
        return dp[index] = Math.max(take, notTake);
    }
    public int rob(int[] nums) {
        int n = nums.length, j = 0;
        if(n == 1)
            return nums[0];
        int[] arr1 = new int[n-1];
        int[] dp = new int[n-1];
        Arrays.fill(dp, -1);
        for(int i=0;i<n;i++)
            if(i != 0)
                arr1[j++] = nums[i];
        j = 0;
        int x = helper(n-2, arr1, dp);
        int[] arr2 = new int[n-1];
        Arrays.fill(dp, -1);
        for(int i=0;i<n;i++)
            if(i != n-1)
                arr2[j++] = nums[i];
        int y = helper(n-2, arr2, dp);
        return Math.max(x, y);
    }
}
