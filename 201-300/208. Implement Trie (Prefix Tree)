class PrefixTree {

    class TrieNode {
        boolean isEndOfWord;
        TrieNode[] children;
        TrieNode() {
            isEndOfWord = false;
            children = new TrieNode[26];
        }
    }

    TrieNode root;

    public PrefixTree() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode crawler = root;
        int n = word.length();
        for(int i=0;i<n;i++) {
            char ch = word.charAt(i);
            int index = ch - 'a';
            if(crawler.children[index] == null)
                crawler.children[index] = new TrieNode();
            crawler = crawler.children[index];
        }
        crawler.isEndOfWord = true;
    }

    public boolean search(String word) {
        TrieNode crawler = root;
        int n = word.length();
        for(int i=0;i<n;i++) {
            char ch = word.charAt(i);
            int index = ch - 'a';
            if(crawler.children[index] == null)
                return false;
            crawler = crawler.children[index];
        }
        if(crawler.isEndOfWord == true)
            return true;
        return false;
    }

    public boolean startsWith(String prefix) {
        TrieNode crawler = root;
        int n = prefix.length(), i = 0;
        for(i=0;i<n;i++) {
            char ch = prefix.charAt(i);
            int index = ch - 'a';
            if(crawler.children[index] == null)
                return false;
            crawler = crawler.children[index];
        }
        if(i == n)
            return true;
        return false;
    }
}
