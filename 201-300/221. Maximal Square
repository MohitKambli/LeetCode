class Solution {
    public int helper(int i, int j, int m, int n, char[][] matrix, int[][] dp) {
        if(i < 0 || j < 0 || i == m || j == n || matrix[i][j] == '0')
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];

        int up = helper(i-1, j, m, n, matrix, dp);
        int upLeft = helper(i-1, j-1, m, n, matrix, dp);
        int left = helper(i, j-1, m, n, matrix, dp);
        return dp[i][j] = 1 + Math.min(up, Math.min(upLeft, left));
    }
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length, n = matrix[0].length, side = 0;
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(matrix[i][j] == '1')
                    side = Math.max(side, helper(i, j, m, n, matrix, dp));
        return side * side;
    }
}
