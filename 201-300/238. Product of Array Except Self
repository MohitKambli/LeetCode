class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] left = new int[n];
        int prod = 1;
        left[0] = 1;
        for(int i=1;i<n;i++) {
            prod *= nums[i-1];
            left[i] = prod;
        }
        prod = 1;
        int[] right = new int[n];
        right[n-1] = 1;
        for(int i=n-2;i>=0;i--) {
            prod *= nums[i+1];
            right[i] = prod;
        }
        int[] ans = new int[n];
        for(int i=0;i<n;i++)
            ans[i] = left[i] * right[i];
        return ans;
    }
}






class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n, prod = len(nums), 1
        prefix = [0 for i in range(n)]
        suffix = [0 for i in range(n)]
        prefix[0] = 1
        for i in range(1, n):
            prod *= nums[i-1]
            prefix[i] = prod
        suffix[n-1] = 1
        prod = 1
        for i in range(n-2, -1, -1):
            prod *= nums[i+1]
            suffix[i] = prod
        ans = [prefix[i] * suffix[i] for i in range(n)]
        return ans
