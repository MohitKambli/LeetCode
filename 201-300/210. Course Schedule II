class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int[] indegree = new int[numCourses];
        int[] ans = new int[numCourses];
        int j = 0, count = 0;
        for(int[] prerequisite : prerequisites) {
            int u = prerequisite[0];
            int v = prerequisite[1];
            if(!map.containsKey(v))
                map.put(v, new ArrayList<>());
            map.get(v).add(u);
            indegree[u]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0;i<numCourses;i++) {
            if(indegree[i] == 0) {
                count++;
                queue.offer(i);
                ans[j++] = i;
            }
        }
        while(!queue.isEmpty()) {
            int node = queue.poll();
            if(map.containsKey(node)) {
                for(int adjNode : map.get(node)) {
                    indegree[adjNode]--;
                    if(indegree[adjNode] == 0) {
                        count++;
                        queue.offer(adjNode);
                        ans[j++] = adjNode;
                    }
                }
            }
        }
        return count == numCourses ? ans : new int[]{};
    }
}
