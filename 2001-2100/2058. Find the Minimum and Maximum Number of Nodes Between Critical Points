/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        ListNode p = head, q = p.next, r = q.next;
        if(p == null || q == null || r == null)
            return new int[]{-1, -1};
        int[] ans = new int[2];
        int location = 2;
        List<Integer> arr = new ArrayList<>();
        while(r != null) {
            if((p.val < q.val && q.val > r.val) || (p.val > q.val && q.val < r.val))
                arr.add(location);
            p = p.next;
            q = q.next;
            r = r.next;
            location++;
        }
        int n = arr.size();
        if(n < 2)
            return new int[]{-1,-1};
        int min = Integer.MAX_VALUE;
        for(int i=0;i<n-1;i++)
            min = Math.min(min, Math.abs(arr.get(i) - arr.get(i+1)));
        ans[0] = min;
        ans[1] = arr.get(n-1) - arr.get(0);
        return ans;
    }
}
