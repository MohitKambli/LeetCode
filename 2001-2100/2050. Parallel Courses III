class Solution {
    public int minimumTime(int n, int[][] relations, int[] time) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int[] indegree = new int[n+1];
        int[] ans = new int[n+1];
        for(int[] relation : relations) {
            int u = relation[0] - 1;
            int v = relation[1] - 1;
            if(!map.containsKey(u))
                map.put(u, new ArrayList<>());
            map.get(u).add(v);
            indegree[v]++;
        }
        List<Integer> queue = new ArrayList<>();
        for(int i=0;i<n;i++) {
            if(indegree[i] == 0) {
                queue.add(i);
                ans[i] = time[i];
            }
        }
        while(!queue.isEmpty()) {
            int node = queue.remove(0);
            if(map.containsKey(node)) {
                for(int x : map.get(node)) {
                    indegree[x]--;
                    ans[x] = Math.max(ans[x], ans[node] + time[x]);
                    if(indegree[x] == 0)
                        queue.add(x);
                }
            }
        }
        int value = Integer.MIN_VALUE;
        for(int x : ans)
            value = Math.max(value, x);
        return value == Integer.MAX_VALUE ? -1 : value;
    }
}
