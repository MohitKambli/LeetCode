/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head == null || head.next == null)
            return null;
        ListNode node = new ListNode(-1, head);
        ListNode temp = node, slow = head, fast = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            temp = temp.next;
            fast = fast.next.next;
        }
        temp.next = slow.next;
        slow.next = null;
        return node.next;
    }
}






# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return None
        
        p, q, temp = head, head, ListNode(next=head)
        while p and p.next:
            p = p.next.next
            q = q.next
            temp = temp.next
        temp.next = q.next
        q.next = None
        return head
