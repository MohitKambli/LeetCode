class Solution {
    public int helper(int i, int j1, int j2, int[][] grid, int[][][] dp) {
        if(j1 < 0 || j1 >= grid[0].length || j2 < 0 || j2 >= grid[0].length) {
            return -20000;
        }
        if(i == grid.length-1) {
            if(j1 == j2)
                return grid[i][j1];
            else
                return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2] != -1)
            return dp[i][j1][j2];

        int[] dj = new int[]{-1, 0, 1};
        int max = -20000;
        for(int dj1=0;dj1<dj.length;dj1++) {
            for(int dj2=0;dj2<dj.length;dj2++) {
                int value = 0;
                if(j1 == j2) {
                    value = grid[i][j1];
                } else {
                    value = grid[i][j1] + grid[i][j2];
                }
                int sum = value + helper(i+1, j1 + dj[dj1], j2 + dj[dj2], grid, dp);
                max = Math.max(sum, max);
            }
        }
        return dp[i][j1][j2] = max;
    }
    public int cherryPickup(int[][] grid) {
        int[][][] dp = new int[grid.length][grid[0].length][grid[0].length];
        for(int[][] rows : dp)
            for(int[] row : rows)
                Arrays.fill(row, -1);
        return helper(0, 0, grid[0].length-1, grid, dp);
    }
}
