/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    public void helper(TreeNode node) {
        if(node == null)
            return;
        map.put(node.val, map.getOrDefault(node.val, 0) + 1);
        helper(node.left);
        helper(node.right);
    }
    public int[] findMode(TreeNode root) {
        helper(root);
        int max = Integer.MIN_VALUE;
        for(int value : map.values())
            max = Math.max(max, value);
        List<Integer> arr = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : map.entrySet())
            if(entry.getValue() == max)
                arr.add(entry.getKey());
        int n = arr.size(), i = 0;
        int[] ans = new int[n];
        for(int x : arr)
            ans[i++] = x;
        return ans;
    }
}
