class Solution {
    public int helper(int i, int j, String s, String p, int[][] dp) {
        if(i < 0 || j < 0)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];

        int ans = 0;
        if(s.charAt(i) == p.charAt(j))
            ans = 1 + helper(i-1, j-1, s, p, dp);
        else
            ans = Math.max(helper(i-1, j, s, p, dp), helper(i, j-1, s, p, dp));
        return dp[i][j] = ans;
    }
    public int longestPalindromeSubseq(String s) {
        String p = "";
        int n = s.length();
        int[][] dp = new int[n][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        for(int i=n-1;i>=0;i--)
            p += s.charAt(i);
        return helper(n-1, n-1, s, p, dp);
    }
}
