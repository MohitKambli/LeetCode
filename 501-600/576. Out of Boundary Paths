class Solution {
    int mod = 1000000007;
    public int helper(int i, int j, int m, int n, int maxMove, int[][][] dp) {
        if(i < 0 || i == m || j < 0 || j == n)
            return 1;
        if(maxMove == 0)
            return 0;
        if(dp[i][j][maxMove] != -1)
            return dp[i][j][maxMove];
        
        int up = helper(i-1, j, m, n, maxMove-1, dp);
        int down = helper(i+1, j, m, n, maxMove-1, dp);
        int left = helper(i, j-1, m, n, maxMove-1, dp);
        int right = helper(i, j+1, m, n, maxMove-1, dp);
        return dp[i][j][maxMove] = (up + (down + (left + (right % mod)) % mod) % mod) % mod;
    }
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int[][][] dp = new int[m][n][maxMove+1];
        for(int[][] arr : dp)
            for(int[] ar : arr)
                Arrays.fill(ar, -1);
        return helper(startRow, startColumn, m, n, maxMove, dp);
    }
}
