class Solution {
    public void helper(int i, int j, int m, int n, char[][] grid) {
        if(i < 0 || i == m || j < 0 || j == n || grid[i][j] == '0')
            return;

        grid[i][j] = '0';
        helper(i-1, j, m, n, grid);
        helper(i+1, j, m, n, grid);
        helper(i, j-1, m, n, grid);
        helper(i, j+1, m, n, grid);
    }
    public int numIslands(char[][] grid) {
        int m = grid.length, n = grid[0].length, count = 0;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j] == '1') {
                    count++;
                    helper(i, j, m, n, grid);
                }
            }
        }
        return count;
    }
}





class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        def helper(i, j, m, n):
            if i < 0 or i == m or j < 0 or j == n or visited[i][j] or grid[i][j] == "0":
                return
            
            visited[i][j] = True
            helper(i-1, j, m, n)
            helper(i+1, j, m, n)
            helper(i, j-1, m, n)
            helper(i, j+1, m, n)
        
        m, n, ans = len(grid), len(grid[0]), 0
        visited = [[False for j in range(n)] for i in range(m)]
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1" and not visited[i][j]:
                    ans += 1
                    helper(i, j, m, n)
        return ans
