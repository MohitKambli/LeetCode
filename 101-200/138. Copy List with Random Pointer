/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Map<Node, Node> map = new HashMap<>();
        if(head == null)
            return head;
        Node curr = head, prev = null, newHead = null;
        while(curr != null) {
            Node node = new Node(curr.val);
            map.put(curr, node);
            if(newHead == null) {
                newHead = node;
                prev = newHead;
            } else {
                prev.next = node;
                prev = node;
            }
            curr = curr.next;
        }
        curr = head;
        Node newCurr = newHead;
        while(curr != null) {
            if(curr.random == null)
                newCurr.random = null;
            else
                newCurr.random = map.get(curr.random);
            curr = curr.next;
            newCurr = newCurr.next;
        }
        return newHead;
    }
}
