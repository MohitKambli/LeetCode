class Solution {
    public int helper(int i, int j, List<List<Integer>> triangle, int[][] dp) {
        if(i == 0 && j == 0)
            return triangle.get(0).get(0);
        if(j < 0 || j == triangle.get(i).size())
            return 20000;
        if(dp[i][j] != -1)
            return dp[i][j];

        int up = helper(i-1, j, triangle, dp);
        int upLeft = helper(i-1, j-1, triangle, dp);
        return dp[i][j] = triangle.get(i).get(j) + Math.min(up, upLeft);
    }
    public int minimumTotal(List<List<Integer>> triangle) {
        int m = triangle.size(), n = triangle.get(m-1).size(), ans = Integer.MAX_VALUE;
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        for(int i=0;i<n;i++)
            ans = Math.min(ans, helper(m-1, i, triangle, dp));
        return ans;
    }
}
