class Solution {
    public int maxPoints(int[][] points) {
        /*int n = points.length;
        int ans = 1;
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                int count = 2;
                int dy_1 = points[j][1] - points[i][1];
                int dx_1 = points[j][0] - points[i][0];
                for(int k=0;k<n;k++) {
                    if(k != i && k != j) {
                        int dy_2 = points[k][1] - points[i][1];
                        int dx_2 = points[k][0] - points[i][0];
                        if((dy_1 * dx_2) == (dy_2 * dx_1))
                            count++;
                    }
                }
                ans = Math.max(ans, count);
            }
        }
        return ans;*/

        int n = points.length, ans = 1;
        int max = Integer.MAX_VALUE;
        for(int i=0;i<n-1;i++) {
            Map<Double, Integer> map = new HashMap<>();
            for(int j=i+1;j<n;j++) {
                double slope = 0.0;
                if(points[i][0] == points[j][0])
                    slope = max;
                else
                    slope = (double)(points[j][1] - points[i][1]) / (double)(points[j][0] - points[i][0]);
                if(slope == -0.0)
                    slope = 0.0;
                map.put(slope, map.getOrDefault(slope, 0) + 1);
                ans = Math.max(ans, map.get(slope) + 1);
            }
        }
        return ans;
    }
}
