class Solution {
    public int helper(int index, int[] nums, int[] dp) {
        if(index < 0)
            return 0;
        if(index == 0)
            return nums[0];
        if(dp[index] != -1)
            return dp[index];

        int take = nums[index] + helper(index-2, nums, dp);
        int notTake = helper(index-1, nums, dp);
        return dp[index] = Math.max(take, notTake);
    }
    public int rob(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        // Recursion + Memoization
        /*Arrays.fill(dp, -1);
        return helper(n-1, nums, dp);*/

        // Tabulation
        dp[0] = nums[0];
        for(int index=1;index<n;index++) {
            int notTake = dp[index-1];
            int take = nums[index];
            if(index-2 >= 0)
                take += dp[index-2];
            dp[index] = Math.max(take, notTake);
        }
        return dp[n-1];
    }
}






class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        n = len(nums)
        dp = [-1 for i in range(n)]

        def helper(index):
            if index < 0:
                return 0
            if index == 0:
                return nums[0]
            if dp[index] != -1:
                return dp[index]

            take = nums[index] + helper(index-2)
            not_take = helper(index-1)
            dp[index] = max(take, not_take)
            return dp[index]
        
        return helper(n-1)








