/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode helper(int[] inorder, int[] postorder, int inStart, int inEnd, int postStart, int postEnd) {
        if(inStart > inEnd || postStart > postEnd)
            return null;
        TreeNode node = new TreeNode(postorder[postEnd]);
        int index = inStart;
        for(;index<=inEnd;index++)
            if(inorder[index] == node.val)
                break;
        int leftSize = index - inStart;
        int rightSize = inEnd - index;
        node.left = helper(inorder, postorder, inStart, index-1, postStart, postStart + leftSize - 1);
        node.right = helper(inorder, postorder, index+1, inEnd, postEnd - rightSize, postEnd - 1);
        return node;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;
        int inStart = 0, inEnd = n-1, postStart = 0, postEnd = n-1;
        return helper(inorder, postorder, inStart, inEnd, postStart, postEnd);
    }
}
