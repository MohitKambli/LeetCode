class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        List<TreeNode> queue = new ArrayList<>();
        queue.add(root);
        while(queue.size() != 0) {
            int queueSize = queue.size();
            List<Integer> level = new ArrayList<>();
            for(int i=0;i<queueSize;i++) {
                TreeNode node = queue.remove(0);
                if(node != null) {
                    level.add(node.val);
                    queue.add(node.left);
                    queue.add(node.right);
                }
            }
            if(level.size() != 0)
                result.add(level);
        }
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=result.size()-1;i>=0;i--)
            ans.add(result.get(i));
        return ans;
    }
}




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[List[int]]
        """
        ans = []
        queue = [root]
        while queue:
            size = len(queue)
            temp = []
            while size > 0:
                node = queue.pop(0)
                if node:
                    if node.left:
                        queue.append(node.left)
                    if node.right:
                        queue.append(node.right)
                    temp.append(node.val)
                size -= 1
            if temp:
                ans.append(temp)
        return ans[::-1]
