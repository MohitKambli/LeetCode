class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for(String token : tokens) {
            if(token.equals("+")) {
                int x = stack.pop();
                int y = stack.pop();
                stack.push(x + y);
            } else if(token.equals("-")) {
                int x = stack.pop();
                int y = stack.pop();
                stack.push(y - x);
            } else if(token.equals("*")) {
                int x = stack.pop();
                int y = stack.pop();
                stack.push(x * y);
            } else if(token.equals("/")) {
                int x = stack.pop();
                int y = stack.pop();
                stack.push(y / x);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.peek();
    }
}





class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for token in tokens:
            if token == '+':
                x = stack.pop()
                y = stack.pop()
                stack.append(x + y)
            elif token == '-':
                x = stack.pop()
                y = stack.pop()
                stack.append(y - x)
            elif token == '*':
                x = stack.pop()
                y = stack.pop()
                stack.append(x * y)
            elif token == '/':
                x = stack.pop()
                y = stack.pop()
                stack.append(int(float(y) / x))
            else:
                stack.append(int(token))
        return stack.pop()
