class Solution {
    public boolean helper(int node, int[][] graph, boolean[] visited, boolean[] isRecursion) {
        visited[node] = true;
        isRecursion[node] = true;
        for(int adjNode : graph[node]) {
            if(!visited[adjNode] && helper(adjNode, graph, visited, isRecursion))
                return true;
            else if(isRecursion[adjNode])
                return true;
        }
        isRecursion[node] = false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        boolean[] visited = new boolean[n];
        boolean[] isRecursion = new boolean[n];
        for(int i=0;i<n;i++)
            if(!visited[i])
                helper(i, graph, visited, isRecursion);
        List<Integer> ans = new ArrayList<>();
        for(int i=0;i<n;i++)
            if(!isRecursion[i])
                ans.add(i);
        return ans;
    }
}
