class Solution {
    public boolean helper(int u, int[][] graph, boolean[] visited, boolean[] isRecursion) {
        visited[u] = true;
        isRecursion[u] = true;
        for(int v : graph[u]) {
            if(!visited[v] && helper(v, graph, visited, isRecursion))
                return true;
            else if(isRecursion[v])
                return true;
        }
        isRecursion[u] = false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> ans = new ArrayList<>();
        int n = graph.length;
        boolean[] visited = new boolean[n];
        boolean[] isRecursion = new boolean[n];
        for(int i=0;i<n;i++)
            if(!visited[i])
                helper(i, graph, visited, isRecursion);
        for(int i=0;i<n;i++)
            if(!isRecursion[i])
                ans.add(i);
        return ans;
    }
}
