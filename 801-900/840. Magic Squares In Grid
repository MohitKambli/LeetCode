class Solution {
    public boolean isMagicGrid(int r, int c, int[][] grid) {
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<3;i++) {
            for(int j=0;j<3;j++) {
                int num = grid[r+i][c+j];
                if(num < 1 || num > 9 || set.contains(num))
                    return false;
                else
                    set.add(num);
            }
        }
        int rSum = grid[r][c] + grid[r][c+1] + grid[r][c+2];
        // Row-Column Sum
        for(int i=0;i<3;i++) {
            if(grid[r+i][c] + grid[r+i][c+1] + grid[r+i][c+2] != rSum)
                return false;
            if(grid[r][c+i] + grid[r+1][c+i] + grid[r+2][c+i] != rSum)
                return false;
        }

        // Diagonal Sum
        if(grid[r][c] + grid[r+1][c+1] + grid[r+2][c+2] != rSum)
            return false;

        // Anti-Digonal Sum
        if(grid[r][c+2] + grid[r+1][c+1] + grid[r+2][c] != rSum)
            return false;
        
        return true;
    }
    public int numMagicSquaresInside(int[][] grid) {
        int m = grid.length, n = grid[0].length, ans = 0;
        for(int i=0;i<=m-3;i++)
            for(int j=0;j<=n-3;j++)
                if(isMagicGrid(i, j, grid))
                    ans++;
        return ans;
    }
}
