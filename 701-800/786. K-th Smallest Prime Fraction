class Solution {
    public int[] helper(int[] arr, double target, int n) {
        int count = 0, num = arr[0], deno = arr[n-1], i=0;
        for(int j=1;j<n;j++) {
            while(arr[i] <= arr[j] * target)
                i++;
            count += i;
            if(i > 0 && arr[i-1] * deno > arr[j] * num) {
                num = arr[i-1];
                deno = arr[j];
            }
        }
        return new int[]{count, num, deno};
    }
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        int n = arr.length;
        double low = arr[0] / (double)arr[n-1];
        double high = 1;
        while(low < high) {
            double mid = (low + high) / 2;
            int[] res = helper(arr, mid, n);
            if(k < res[0])
                high = mid;
            else if(k > res[0])
                low = mid;
            else
                return new int[]{res[1], res[2]};
        }
        return null;
    }
}
