class Solution {
    public int slidingPuzzle(int[][] board) {
        int m = 2, n = 3, level = 0;
        StringBuilder tempStart = new StringBuilder();
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                tempStart.append(board[i][j]);
        String start = tempStart.toString();
        String target = "123450";
        int[][] directions = new int[][]{{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};
        List<String> queue = new ArrayList<>();
        Set<String> visited = new HashSet<>();
        queue.add(start);
        visited.add(start);
        while(!queue.isEmpty()) {
            int size = queue.size();
            while(size-- > 0) {
                String temp = queue.remove(0);
                if(temp.equals(target))
                    return level;
                int index = temp.indexOf('0');
                for(int swapIndex : directions[index]) {
                    StringBuilder sb = new StringBuilder(temp);
                    sb.setCharAt(index, sb.charAt(swapIndex));
                    sb.setCharAt(swapIndex, '0');
                    String str = sb.toString();
                    if(visited.contains(str))
                        continue;
                    visited.add(str);
                    queue.add(str);
                }
            }
            level++;
        }
        return -1;
    }
}
