/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode curr = head;
        int n = 0;
        while(curr != null) {
            n++;
            curr = curr.next;
        }
        int bucketNodes = n / k;
        int remainingNodes = n % k;
        ListNode[] ans = new ListNode[k];
        curr = head;
        int p = 0;
        for(int i=0;i<k;i++) {
            ans[p++] = curr;
            ListNode prev = curr;
            for(int j=1;j<=bucketNodes + (remainingNodes > 0 ? 1 : 0);j++) {
                prev = curr;
                curr = curr.next;
            }
            if(prev != null)
                prev.next = null;
            remainingNodes--;
        }
        return ans;
    }
}
