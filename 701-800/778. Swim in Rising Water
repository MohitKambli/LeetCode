class Solution {
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        heap.add(new int[]{grid[0][0], 0, 0});
        int[][] ans = new int[n][n];
        for(int[] arr : ans)
            Arrays.fill(arr, Integer.MAX_VALUE);
        ans[0][0] = 0;
        int[][] directions = new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
        while(!heap.isEmpty()) {
            int[] pair = heap.poll();
            int height = pair[0];
            int x = pair[1], y = pair[2];
            for(int[] direction : directions) {
                int dx = direction[0], dy = direction[1];
                int newX = x + dx, newY = y + dy;
                if(newX < 0 || newX == n || newY < 0 || newY == n)
                    continue;
                int maxHeight = Math.max(height, grid[newX][newY]);
                if(maxHeight < ans[newX][newY]) {
                    ans[newX][newY] = maxHeight;
                    heap.add(new int[]{maxHeight, newX, newY});
                }
            }
        }
        return ans[n-1][n-1];
    }
}
