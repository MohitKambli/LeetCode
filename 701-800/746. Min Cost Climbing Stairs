class Solution {
    public int helper(int index, int[] cost, int[] dp) {
        if(index < 0)
            return 0;
        if(dp[index] != -1)
            return dp[index];

        int oneStep = helper(index-1, cost, dp);
        int twoSteps = helper(index-2, cost, dp);
        return dp[index] = cost[index] + Math.min(oneStep, twoSteps);
    }
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;

        // Recursion + Memoization
        /*int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return Math.min(helper(n-1, cost, dp), helper(n-2, cost, dp));*/

        // Tabulation
        int[] dp = new int[n+1];
        Arrays.fill(dp, 0);
        for(int index=0;index<n;index++) {
            int oneStep = cost[index];
            if(index-1 >= 0)
                oneStep += dp[index-1];
            int twoSteps = cost[index];
            if(index-2 >= 0)
                twoSteps += dp[index-2];
            dp[index] = Math.min(oneStep, twoSteps);
        }
        return Math.min(dp[n-1], dp[n-2]);
    }
}






class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        
        n = len(cost)
        dp = [-1 for i in range(n)]

        def helper(index):
            if index < 0:
                return 0
            if dp[index] != -1:
                return dp[index]

            one_step = helper(index-1)
            two_steps = helper(index-2)
            dp[index] = cost[index] + min(one_step, two_steps)
            return dp[index]
        
        return min(helper(n-1), helper(n-2))






