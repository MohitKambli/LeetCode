class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        int m = maze.length, n = maze[0].length, level = 0;
        List<int[]> queue = new ArrayList<>();
        queue.add(entrance);
        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()) {
            int size = queue.size();
            while(size-- > 0) {
                int[] cell = queue.remove(0);
                int x = cell[0], y = cell[1];
                if((x != entrance[0] || y != entrance[1]) && (x == 0 || x == m-1 || y == 0 || y == n-1))
                    return level;
                for(int[] direction : directions) {
                    int dx = direction[0], dy = direction[1];
                    int newX = x + dx, newY = y + dy;
                    if(newX < 0 || newX == m || newY < 0 || newY == n || maze[newX][newY] == '+')
                        continue;
                    maze[newX][newY] = '+';
                    queue.add(new int[]{newX, newY});
                }
            }
            level++;
        }
        return -1;
    }
}





class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        queue = [entrance]
        directions = [[0,1],[0,-1],[1,0],[-1,0]]
        m, n, level = len(maze), len(maze[0]), 0
        while queue:
            size = len(queue)
            while size > 0:
                x, y = queue.pop()
                if (x != entrance[0] or y != entrance[1]) and (x == 0 or x == m-1 or y == 0 or y == n-1):
                    return level
                for direction in directions:
                    new_x, new_y = x + direction[0], y + direction[1]
                    if new_x < 0 or new_x == m or new_y < 0 or new_y == n or maze[new_x][new_y] == '+':
                        continue
                    queue.append([new_x, new_y])
                    maze[new_x][new_y] = '+'
                size -= 1
            level += 1
        return -1
