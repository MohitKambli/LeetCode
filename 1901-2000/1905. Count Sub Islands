class Solution {
    public boolean helper(int i, int j, int m, int n, boolean[][] visited, int[][] grid1, int[][] grid2) {
        if(i < 0 || i == m || j < 0 || j == n || visited[i][j] || grid2[i][j] == 0)
            return true;
        
        visited[i][j] = true;
        boolean res = true;
        if(grid1[i][j] == 0)
            res = false;
        res = helper(i-1, j, m, n, visited, grid1, grid2) && res;
        res = helper(i+1, j, m, n, visited, grid1, grid2) && res;
        res = helper(i, j-1, m, n, visited, grid1, grid2) && res;
        res = helper(i, j+1, m, n, visited, grid1, grid2) && res;
        return res;
    }
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int m = grid1.length, n = grid1[0].length, ans = 0;
        boolean[][] visited = new boolean[m][n];
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid2[i][j] == 1 && !visited[i][j] && helper(i, j, m, n, visited, grid1, grid2))
                    ans++;
        return ans;
    }
}
