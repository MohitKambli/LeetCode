class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for(int num : nums1)
            map1.put(num, map1.getOrDefault(num, 0) + 1);
        for(int num : nums2)
            map2.put(num, map2.getOrDefault(num, 0) + 1);
        List<Integer> arr = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : map1.entrySet()) {
            int key = entry.getKey();
            int value = entry.getValue();
            if(map2.containsKey(key)) {
                for(int i=0;i<Math.min(value, map2.get(key));i++)
                    arr.add(key);
            }
        }
        int[] ans = new int[arr.size()];
        int i = 0;
        for(int x : arr)
            ans[i++] = x;
        return ans;
    }
}





class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        my_map = {}
        for num in nums1:
            if num not in my_map:
                my_map[num] = 0
            my_map[num] += 1
        ans = []
        for num in nums2:
            if num in my_map and my_map[num] > 0:
                ans.append(num)
                my_map[num] -= 1
        return ans
