class Solution {
    public String decodeString(String s) {
        List<String> stack = new ArrayList<>();
        int n = s.length();
        for(int i=0;i<n;i++) {
            String temp = Character.toString(s.charAt(i));
            if(!temp.equals("]"))
                stack.add(temp);
            else {
                String x = "";
                while(!stack.get(stack.size()-1).equals("["))
                    x = stack.remove(stack.size()-1) + x;
                stack.remove(stack.size()-1);
                String num = "";
                while(!stack.isEmpty() && "012345689".contains(stack.get(stack.size()-1)))
                    num = stack.remove(stack.size()-1) + num;
                int numValue = Integer.parseInt(num);
                for(int j=0;j<numValue;j++)
                    stack.add(x);
            }
        }
        String res = "";
        for(String val : stack)
            res += val;
        return res;
    }
}


class Solution {
    public String decodeString(String s) {
        int n = s.length();
        List<Character> stack = new ArrayList<>();
        for(int i=0;i<n;i++) {
            char ch = s.charAt(i);
            if(ch != ']') {
                stack.add(ch);
            } else {
                String temp = "";
                while(!stack.isEmpty() && stack.get(stack.size()-1) != '[') {
                    char x = stack.remove(stack.size()-1);
                    temp = x + temp;
                }
                stack.remove(stack.size()-1);
                String num = "";
                while(!stack.isEmpty() && Character.isDigit(stack.get(stack.size()-1))) {
                    char x = stack.remove(stack.size()-1);
                    num = x + num;
                }
                int number = Integer.parseInt(num);
                String p = "";
                for(int j=0;j<number;j++)
                    p += temp;
                for(char c : p.toCharArray())
                    stack.add(c);
            }
        }
        String ans = "";
        int len = stack.size();
        for(int i=0;i<len;i++)
            ans += stack.get(i);
        return ans;
    }
}
