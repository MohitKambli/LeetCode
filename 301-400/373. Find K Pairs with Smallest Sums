class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        PriorityQueue<Pair<Integer, Pair<Integer, Integer>>> minHeap = new PriorityQueue<>((a, b) -> {
            return a.getKey() - b.getKey();
        });
        List<List<Integer>> ans = new ArrayList<>();
        Set<Pair<Integer, Integer>> visited = new HashSet<>();
        int sum = nums1[0] + nums2[0], m = nums1.length, n = nums2.length;
        minHeap.add(new Pair<>(sum, new Pair<>(0, 0)));
        visited.add(new Pair<>(0, 0));
        while(k-- > 0 && !minHeap.isEmpty()) {
            Pair<Integer, Pair<Integer, Integer>> pair = minHeap.poll();
            int i = pair.getValue().getKey();
            int j = pair.getValue().getValue();
            ans.add(new ArrayList<>(Arrays.asList(nums1[i], nums2[j])));
            if(i+1 < m && !visited.contains(new Pair<>(i+1, j))) {
                minHeap.add(new Pair<>(nums1[i+1] + nums2[j], new Pair<>(i+1, j)));
                visited.add(new Pair<>(i+1, j));
            }
            if(j+1 < n && !visited.contains(new Pair<>(i, j+1))) {
                minHeap.add(new Pair<>(nums1[i] + nums2[j+1], new Pair<>(i, j+1)));
                visited.add(new Pair<>(i, j+1));
            }
        }
        return ans;
    }
}
