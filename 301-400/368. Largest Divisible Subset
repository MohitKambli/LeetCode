class Solution {
    List<Integer> ans = new ArrayList<>();
     public void helper(int i, int value, int[] nums, List<Integer> temp, int[] dp) {
        if(i > nums.length-1) {
            if(temp.size() > ans.size()) {
                ans.clear();
                ans.addAll(temp);
            }
            return;
        }

        if(temp.size() > dp[i] && nums[i] % value == 0) {
            dp[i] = temp.size();
            temp.add(nums[i]);
            helper(i+1, nums[i], nums, temp, dp);
            temp.remove(temp.size()-1);
        }
        helper(i+1, value, nums, temp, dp);
    }
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        List<Integer> temp = new ArrayList<>();
        Arrays.sort(nums);
        helper(0, 1, nums, temp, dp);
        return ans;
    }
}
