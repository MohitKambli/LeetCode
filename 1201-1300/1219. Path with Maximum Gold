class Solution {
    public int helper(int i, int j, int m, int n, boolean[][] visited, int[][] grid) {
        if(i < 0 || i == m || j < 0 || j == n || grid[i][j] == 0 || visited[i][j])
            return 0;

        visited[i][j] = true;
        int up = helper(i-1, j, m, n, visited, grid);
        int down = helper(i+1, j, m, n, visited, grid);
        int left = helper(i, j-1, m, n, visited, grid);
        int right = helper(i, j+1, m, n, visited, grid);
        visited[i][j] = false;
        return grid[i][j] + Math.max(up, Math.max(down, Math.max(left, right)));
    }
    public int getMaximumGold(int[][] grid) {
        int m = grid.length, n = grid[0].length, ans = Integer.MIN_VALUE;
        boolean[][] visited = new boolean[m][n];
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                ans = Math.max(ans, helper(i, j, m, n, visited, grid));
        return ans;
    }
}
