class Solution {
    public String helper(int i, int j, String s, String p, String[][] dp) {
        if(i < 0 || j < 0)
            return "";
        if(dp[i][j] != null)
            return dp[i][j];

        if(s.charAt(i) == p.charAt(j))
            return dp[i][j] = helper(i-1, j-1, s, p, dp) + s.charAt(i);
        String s1 = helper(i-1, j, s, p, dp);
        String s2 = helper(i, j-1, s, p, dp);
        return dp[i][j] = s1.length() >= s2.length() ? s1 : s2;
    }
    public String shortestCommonSupersequence(String s, String p) {
        int m = s.length(), n = p.length();
        String[][] dp = new String[m][n];
        String lcs = helper(m-1, n-1, s, p, dp);
        int i = 0, j = 0;
        StringBuilder sb = new StringBuilder();
        for(char ch : lcs.toCharArray()) {
            while(s.charAt(i) != ch)
                sb.append(s.charAt(i++));
            while(p.charAt(j) != ch)
                sb.append(p.charAt(j++));
            sb.append(ch);
            i++;
            j++;
        }
        sb.append(s.substring(i));
        sb.append(p.substring(j));
        return sb.toString();
    }
}
