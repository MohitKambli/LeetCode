class Solution {
    public int[][] highestPeak(int[][] arr) {
        int m = arr.length, n = arr[0].length;
        int[][] ans = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(arr[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                    ans[i][j] = 0;
                } else {
                    ans[i][j] = -1;
                }
            }
        }
        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()) {
            int[] pair = queue.poll();
            int x = pair[0], y = pair[1];
            for(int[] direction : directions) {
                int dx = direction[0], dy = direction[1];
                int newX = x + dx, newY = y + dy;
                if(newX < 0 || newX == m || newY < 0 || newY == n || ans[newX][newY] != -1)
                    continue;
                ans[newX][newY] = ans[x][y] + 1;
                queue.offer(new int[]{newX, newY});
            }
        }
        return ans;
    }
}
